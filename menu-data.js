/**
 * Google Sheets Integration - Production Ready
 * Direct CSV loading without API keys
 * Optimized for GitHub Pages hosting
 */

// Google Sheets Configuration  
const GOOGLE_SHEETS_CONFIG = {
    spreadsheetId: '1BRQuzea6bba0NxxPk9koLSzpHkfiAzrKmwDa8ow7128',
    cacheDuration: 5 * 60 * 1000 // 5 –º–∏–Ω—É—Ç –∫–µ—à–∞
};

// Cache for menu data
let menuDataCache = {
    data: null,
    timestamp: 0
};

// Function to fetch data from public Google Sheets (CSV format)
async function fetchFromGoogleSheets() {
    // –ù–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ URL –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    const urls = [
        // –ü—É–±–ª–∏—á–Ω–∞—è CSV —Å—Å—ã–ª–∫–∞
        `https://docs.google.com/spreadsheets/d/${GOOGLE_SHEETS_CONFIG.spreadsheetId}/export?format=csv&gid=0`,
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ CORS
        `https://docs.google.com/spreadsheets/d/${GOOGLE_SHEETS_CONFIG.spreadsheetId}/gviz/tq?tqx=out:csv&gid=0`,
        // –ï—â–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç
        `https://docs.google.com/spreadsheets/d/${GOOGLE_SHEETS_CONFIG.spreadsheetId}/export?exportFormat=csv&gid=0`
    ];
    
    for (let i = 0; i < urls.length; i++) {
        const url = urls[i];
        console.log(`–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ URL ${i + 1}:`, url);
        
        try {
            const response = await fetch(url, {
                method: 'GET',
                headers: {
                    'Accept': 'text/csv,text/plain,*/*'
                },
                mode: 'cors'
            });
            
            if (!response.ok) {
                console.log(`URL ${i + 1} failed with status:`, response.status);
                continue;
            }
            
            const csvText = await response.text();
            console.log(`–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ URL ${i + 1}, —Ä–∞–∑–º–µ—Ä:`, csvText.length);
            console.log('–ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤:', csvText.substring(0, 200));
            
            const parsedData = parseCSV(csvText);
            if (parsedData && parsedData.length > 0) {
                return parsedData;
            }
        } catch (error) {
            console.log(`–û—à–∏–±–∫–∞ —Å URL ${i + 1}:`, error.message);
        }
    }
    
    console.error('–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Google Sheets –Ω–µ—É–¥–∞—á–Ω—ã');
    
    // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ CORS proxy (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    try {
        console.log('–ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ CORS proxy...');
        const proxyUrl = `https://api.allorigins.win/get?url=${encodeURIComponent(`https://docs.google.com/spreadsheets/d/${GOOGLE_SHEETS_CONFIG.spreadsheetId}/export?format=csv&gid=0`)}`;
        
        const response = await fetch(proxyUrl);
        if (response.ok) {
            const data = await response.json();
            if (data.contents) {
                console.log('–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —á–µ—Ä–µ–∑ CORS proxy');
                const parsedData = parseCSV(data.contents);
                if (parsedData && parsedData.length > 0) {
                    return parsedData;
                }
            }
        }
    } catch (error) {
        console.log('CORS proxy —Ç–∞–∫–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error.message);
    }
    
    return null;
}

// Function to parse CSV data
function parseCSV(csvText) {
    const lines = csvText.split('\n');
    const result = [];
    
    for (let i = 0; i < lines.length; i++) {
        const line = lines[i].trim();
        if (!line) continue;
        
        // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä CSV (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—è—Ç—ã–µ –≤ –∫–∞–≤—ã—á–∫–∞—Ö)
        const row = [];
        let current = '';
        let inQuotes = false;
        
        for (let j = 0; j < line.length; j++) {
            const char = line[j];
            
            if (char === '"') {
                inQuotes = !inQuotes;
            } else if (char === ',' && !inQuotes) {
                row.push(current.trim());
                current = '';
            } else {
                current += char;
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ª–µ
        row.push(current.trim());
        result.push(row);
    }
    
    return result;
}

// Function to parse raw sheet data into menu format
function parseSheetData(rawData) {
    if (!rawData || rawData.length === 0) return [];
    
    console.log('–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö, –≤—Å–µ–≥–æ —Å—Ç—Ä–æ–∫:', rawData.length);
    
    const menuItems = [];
    let startIndex = 0;
    
    // –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏)
    for (let i = 0; i < rawData.length; i++) {
        const row = rawData[i];
        if (row && row.length >= 6 && 
            row[0] && 
            !row[0].toLowerCase().includes('–∫–∞—Ç–µ–≥–æ—Ä–∏—è') &&
            !row[0].toLowerCase().includes('category')) {
            startIndex = i;
            break;
        }
    }
    
    console.log('–ù–∞—á–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö —Å —Å—Ç—Ä–æ–∫–∏:', startIndex);
    if (startIndex < rawData.length) {
        console.log('–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö:', rawData[startIndex]);
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
    for (let i = startIndex; i < rawData.length; i++) {
        const row = rawData[i];
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if (!row || row.length === 0 || !row[0] || row[0].trim() === '') continue;
        
        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –ª–∏—à–Ω–∏—Ö –∫–∞–≤—ã—á–µ–∫ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
        const cleanRow = row.map(cell => {
            if (typeof cell === 'string') {
                return cell.replace(/^"(.*)"$/, '$1').trim();
            }
            return cell ? cell.toString().trim() : '';
        });
        
        // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã: –ö–∞—Ç–µ–≥–æ—Ä–∏—è, –ê–Ω–≥–ª–∏–π—Å–∫–∏–π, –†—É—Å—Å–∫–∏–π, –°–µ—Ä–±—Å–∫–∏–π, –û–±—ä–µ–º, –°—Ç–æ–∏–º–æ—Å—Ç—å, –°–æ—Å—Ç–∞–≤
        const menuItem = {
            category: cleanRow[0] || '',
            names: {
                en: cleanRow[1] || '',
                ru: cleanRow[2] || '',
                sr: cleanRow[3] || ''
            },
            volume: cleanRow[4] || '',
            price: cleanRow[5] || '0',
            composition: cleanRow[6] || 'composition'
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ)
        if (menuItem.category && 
            menuItem.category !== '–∫–∞—Ç–µ–≥–æ—Ä–∏—è' && 
            menuItem.category !== 'category' && 
            (menuItem.names.en || menuItem.names.ru || menuItem.names.sr)) {
            
            console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: [${menuItem.category}] ${menuItem.names.en || menuItem.names.ru || menuItem.names.sr} - ${menuItem.price} RSD`);
            menuItems.push(menuItem);
        }
    }
    
    console.log(`üéâ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${menuItems.length} –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é`);
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categories = [...new Set(menuItems.map(item => item.category))];
    console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', categories);
    
    return menuItems;
}

// Function to load menu with caching
async function loadMenuFromGoogleSheets(forceRefresh = false) {
    const now = Date.now();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    if (!forceRefresh && 
        menuDataCache.data && 
        (now - menuDataCache.timestamp) < GOOGLE_SHEETS_CONFIG.cacheDuration) {
        console.log('–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞');
        return menuDataCache.data;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    console.log('–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets...');
    
    try {
        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Google Sheets
        const rawData = await fetchFromGoogleSheets();
        
        if (rawData) {
            const parsedData = parseSheetData(rawData);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
            menuDataCache = {
                data: parsedData,
                timestamp: now
            };
            
            console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${parsedData.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–µ–Ω—é`);
            return parsedData;
        } else {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é:', error);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (menuDataCache.data) {
            console.log('–ò—Å–ø–æ–ª—å–∑—É—é –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏');
            return menuDataCache.data;
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∏–ª–∏ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
        console.log('–í–æ–∑–≤—Ä–∞—â–∞—é –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ');
        return getDemoData();
    }
}

// Demo data for development/fallback (—Ç–æ—á–Ω–æ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –≤–∞—à–µ–π Google –¢–∞–±–ª–∏—Ü—ã)
function getDemoData() {
    return [
        {
            category: "Coffee &",
            names: {
                en: "Espresso",
                ru: "–≠—Å–ø—Ä–µ—Å—Å–æ",
                sr: "–ï—Å–ø—Ä–µ—Å–æ"
            },
            volume: "S",
            price: "150",
            composition: "composition"
        },
        {
            category: "Coffee &",
            names: {
                en: "Espresso",
                ru: "–≠—Å–ø—Ä–µ—Å—Å–æ",
                sr: "–ï—Å–ø—Ä–µ—Å–æ"
            },
            volume: "L",
            price: "250",
            composition: "composition"
        },
        {
            category: "Coffee &",
            names: {
                en: "Americano",
                ru: "–ê–º–µ—Ä–∏–∫–∞–Ω–æ",
                sr: "–ê–º–µ—Ä–∏–∫–∞–Ω–æ"
            },
            volume: "S",
            price: "150",
            composition: "composition"
        },
        {
            category: "Coffee &",
            names: {
                en: "Americano",
                ru: "–ê–º–µ—Ä–∏–∫–∞–Ω–æ",
                sr: "–ê–º–µ—Ä–∏–∫–∞–Ω–æ"
            },
            volume: "L",
            price: "270",
            composition: "composition"
        },
        {
            category: "Coffee &",
            names: {
                en: "Cappuccino",
                ru: "–ö–∞–ø—É—á–∏–Ω–æ",
                sr: "–ö–∞–ø—É—á–∏–Ω–æ"
            },
            volume: "S",
            price: "200",
            composition: "composition"
        },
        {
            category: "Coffee &",
            names: {
                en: "Latte",
                ru: "–õ–∞—Ç—Ç–µ",
                sr: "–õ–∞—Ç–µ"
            },
            volume: "S",
            price: "320",
            composition: "composition"
        },
        {
            category: "Coffee &",
            names: {
                en: "Flat White",
                ru: "–§–ª—ç—Ç —É–∞–π—Ç",
                sr: "–§–ª–µ—Ç –≤–∞—ò—Ç"
            },
            volume: "S",
            price: "380",
            composition: "composition"
        },
        {
            category: "Coffee &",
            names: {
                en: "Iced Americano",
                ru: "–ê–π—Å –∞–º–µ—Ä–∏–∫–∞–Ω–æ",
                sr: "–ê—ò—Å –∞–º–µ—Ä–∏–∫–∞–Ω–æ"
            },
            volume: "L",
            price: "300",
            composition: "composition"
        }
    ];
}

// Function to refresh menu data
async function refreshMenuData() {
    return await loadMenuFromGoogleSheets(true);
}